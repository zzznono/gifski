name: GIFify

on:
  workflow_dispatch:
    inputs:
      video:
        description: 'Path to input video in repo'
        required: true
        default: 'earth.MOV'

jobs:
  build-gif:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg gifski coreutils

      - name: Run conversion script
        shell: bash
        run: |
          set -eu

          IN_VIDEO="${{ github.event.inputs.video }}"
          echo "üé• Input video: $IN_VIDEO"
          if [ ! -f "$IN_VIDEO" ]; then
            echo "‚ùå File not found: $IN_VIDEO"
            exit 1
          fi

          BASE_NAME=$(basename "$IN_VIDEO")
          OUT_GIF="${BASE_NAME%.*}_4s_30fps_q100.gif"
          echo "üîß Output GIF: $OUT_GIF"

          TARGET_DURATION_SEC=4.0
          FPS=30
          QUALITY=100
          SIZE_LIMIT_MB=14.5
          SIZE_LIMIT_BYTES=$(awk -v m="$SIZE_LIMIT_MB" 'BEGIN{printf "%.0f", m*1024*1024}')

          WORKDIR="$(pwd)/_gifski_tmp"
          FRAMES_DIR="$WORKDIR/frames"
          PIPE_GIF="$WORKDIR/test.gif"
          mkdir -p "$FRAMES_DIR"

          echo "üîç Probing video metadata..."
          read SRC_W SRC_H SRC_DUR <<EOF
$(ffprobe -v error -select_streams v:0 \
  -show_entries stream=width,height \
  -show_entries format=duration \
  -of default=noprint_wrappers=1:nokey=1 "$IN_VIDEO" \
  | paste -d' ' - - -)
EOF
          echo "üìä Source W:${SRC_W} H:${SRC_H} D:${SRC_DUR}"

          SETPTS_FACTOR=$(awk -v t="$TARGET_DURATION_SEC" -v d="$SRC_DUR" 'BEGIN{printf "%.9f", t/d}')
          echo "‚öôÔ∏è Speed factor: $SETPTS_FACTOR"

          gen_frames() {
            width=$1
            rm -f "$FRAMES_DIR"/*.png
            height=$(awk -v w="$width" -v sw="$SRC_W" -v sh="$SRC_H" 'BEGIN{
              h=w*sh/sw; h=int(h+0.5);
              if(h%2==1)h++; if(h<2)h=2;
              printf "%d",h}')
            ffmpeg -v error -threads 0 -i "$IN_VIDEO" -an \
              -vf "setpts=${SETPTS_FACTOR}*PTS,fps=${FPS},scale=${width}:${height}:flags=lanczos" \
              -start_number 0 "$FRAMES_DIR/frame_%06d.png"
          }

          encode_gif() {
            out=$1
            gifski --fps "$FPS" --quality "$QUALITY" --extra -o "$out" "$FRAMES_DIR"/frame_*.png
          }

          gif_size() { stat -c%s "$1"; }

          TOTAL_FRAMES=$(awk -v t="$TARGET_DURATION_SEC" -v f="$FPS" 'BEGIN{printf "%d", int(t*f+0.5)}')
          [ "$TOTAL_FRAMES" -lt 1 ] && TOTAL_FRAMES=1

          W_UPPER=$(awk -v S="$SIZE_LIMIT_BYTES" -v F="$TOTAL_FRAMES" -v sh="$SRC_H" -v sw="$SRC_W" 'BEGIN{
            ratio=sh/sw; denom=0.20*F*ratio; w=sqrt(S/denom);
            if(w<16)w=16; if(w>4096)w=4096;
            printf "%d",int(w)}')
          W_LOWER=16
          [ "$W_UPPER" -lt "$SRC_W" ] && W_UPPER=$SRC_W
          [ "$W_UPPER" -lt "$W_LOWER" ] && W_UPPER=$W_LOWER

          ORIG_LO=$W_LOWER
          ORIG_UP=$W_UPPER
          BEST=0

          while [ "$W_LOWER" -le "$W_UPPER" ]; do
            MID=$(((W_LOWER+W_UPPER)/2))
            PROG=$(( (MID-ORIG_LO)*100/(ORIG_UP-ORIG_LO) ))
            echo "üîÑ [$PROG%] Testing width $MID"
            gen_frames "$MID"
            encode_gif "$PIPE_GIF"
            SIZE=$(gif_size "$PIPE_GIF")
            echo "üìè Size: $((SIZE/1024)) KB"
            if [ "$SIZE" -le "$SIZE_LIMIT_BYTES" ]; then
              BEST=$MID
              W_LOWER=$((MID+2))
              echo "‚úÖ Acceptable at width $MID"
            else
              W_UPPER=$((MID-2))
              echo "‚ö†Ô∏è Too large at width $MID"
            fi
          done

          if [ "$BEST" -eq 0 ]; then
            BEST=16
            echo "‚ö†Ô∏è No acceptable width found; defaulting to $BEST"
            gen_frames "$BEST"
            encode_gif "$PIPE_GIF"
          fi

          mv -f "$PIPE_GIF" "$OUT_GIF"
          echo "üéâ Created $OUT_GIF"

      - name: Upload GIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: gif
          path: '*.gif'
